apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

/*
 *  UVCCamera
 *  library and sample to access to UVC web camera on non-rooted Android device
 *
 * Copyright (c) 2014-2017 saki t_saki@serenegiant.com
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *  All files in the folder are under this Apache License, Version 2.0.
 *  Files in the libjpeg-turbo, libusb, libuvc, rapidjson folder
 *  may have a different license, see the respective files.
 */

import org.apache.tools.ant.taskdefs.condition.Os

ext {
	minSdkVersion = 21
	ndkVersion = '24.0.8215888'
	cmakeVersion = '3.18.1'
	supportLibVersion = '27.1.1'  // variable that can be referenced to keep support libs consistent
	commonLibVersion= '2.12.4'
	versionBuildTool = '27.0.3'
	versionCompiler = 32
	versionTarget = 27
	versionCode = 1
	androidXVersion = '1.1.0'
	appcompatVersion = "1.4.2"
	versionNameString = '1.0.0'
	javaSourceCompatibility = JavaVersion.VERSION_11
	javaTargetCompatibility = JavaVersion.VERSION_11
}

android {
	compileSdkVersion project.ext.versionCompiler

	compileOptions {
		sourceCompatibility project.ext.javaSourceCompatibility
		targetCompatibility project.ext.javaTargetCompatibility
	}

	kotlinOptions {
		jvmTarget = '11'
	}

    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
		targetSdkVersion project.ext.versionTarget
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
	sourceSets {
		main {
			jniLibs.srcDir 'src/main/libs'
			jni.srcDirs = []
		}
	}

	// ndkVersion ndkVersion

	externalNativeBuild {
		cmake {
			version project.ext.cmakeVersion
		}
	}
}

task wrapper(type: Wrapper){
	gradleVersion = '7.4'
}

task prepareKotlinBuildScriptModel {

}

tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn ndkBuild
}

String getNdkBuildPath() {
	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	def ndkBuildingDir = properties.getProperty("ndk.dir") + project.ext.ndkVersion
	def ndkBuildPath = ndkBuildingDir
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
	} else {
		ndkBuildPath = ndkBuildingDir + '/ndk-build'
	}
	return ndkBuildPath
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
	println('executing ndkBuild')
	def ndkBuildPath = getNdkBuildPath()
	commandLine ndkBuildPath, '-C', file('src/main').absolutePath
}

task ndkClean(type: Exec, description: 'clean JNI libraries') {
	println('executing ndkBuild clean')
	def ndkBuildPath = getNdkBuildPath()
	commandLine ndkBuildPath, 'clean', '-C', file('src/main').absolutePath
}

clean.dependsOn 'ndkClean'

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')

	implementation "androidx.appcompat:appcompat:$appcompatVersion"
	// For loading and tinting drawables on older versions of the platform
	implementation "androidx.appcompat:appcompat-resources:$appcompatVersion"
	// implementation "com.android.support:support-v4:${supportLibVersion}"
	// implementation "com.android.support:support-annotations:${supportLibVersion}"

	implementation "androidx.core:core-ktx:1.8.0"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
